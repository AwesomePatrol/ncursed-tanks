See common.h for protocol specs

+------------+       +------+
|local client|<----->|server|
+------------+       +------+
+---------+           |
| client 1|<--------->|
+---------+           |
                      |
+---------+           |
| client n|<--------->|
+---------+

-> send
<- receive

client
------
start connection (client side):
    getaddrinfo() - get list of addrinfo structures
    socket()      - opens socket (until succesful)
    connect()     - connects through earlier socket

function fetch_changes() is run in at most 2s intervals
all structs used in communication protocol are defined and described in common.h

join_game:
    -> C_JOIN
    -> nickname                         /*nickname is set via command line argument
                                        * it is obligatory*/
    <- JoinReply
    -> loc_player_id                    /*ID number of local client
                                        * used later to recognize local client
                                        * in updates (U_ADD_PLAYER) */
    fetch_map:
        -> C_GET_MAP
        <- map_info                     //map is generated right fter
    fetch_changes:
        -> C_GET_CHANGES
        <- struct update
        â€¦                               //multiple updates
        <- NetUpdate->type == U_EMPTY   //at the end always receive empty update

lobby_scene:
    fetch_changes                       //function is described earlier
    lobby_menu:
        -> C_SET_ABILITY
        -> loc_player->ability_id
        -> C_READY
        fetch_changes

wait_scene:
    fetch_changes

shoot_menu_scene:
    fetch_changes
    shoot_menu:
        send_shoot:
            -> C_SHOOT
            -> struct shot

post_game_scene:
    fetch_changes

server
------
init_server:
    socket()
    setsockopt()
    bind()       - bind the socket to port

server_listen:
    listen()     - listen for incoming connections
    /* for every client */
    accept()
    create connection thread
    /* end */

connection_thread:
    /* while connected */
    <- command
    process_command()
    /* end */
    disconnect_cur_client()

process_command:
    /* based on command, e.g. C_JOIN => process_join_command() */

process_ready_command:
    change player state to PS_READY
    if all the players are ready, start_game()

process_shoot_command:
    add U_SHOT update
    find impact position
    add U_SHOT_IMPACT update with the position
    process_impact()

process_impact:
    deal damage to players
    update map
    end_game_if_needed()

